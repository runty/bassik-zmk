/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

&sk {
    // don't release mods on other mods presses

    ignore-modifiers;
};

/ {
    behaviors {
        qt: quick_tap {
                compatible = "zmk,behavior-hold-tap";
                #binding-cells = <2>;
                flavor = "tap-preferred";
                require-prior-idle-ms = <50>;
                tapping-term-ms = <200>;
                quick-tap-ms = <200>;
                bindings = <&kp>, <&kp>;
            };
            as_ht: autoshift_hold_tap {
                compatible = "zmk,behavior-hold-tap";
                #binding-cells = <2>;
                tapping-term-ms = <200>;
                bindings = <&shifted>, <&kp>;
                flavor = "tap-preferred";
            };

        macros {
                // sometimes my device thinks a modifier is being held down
                // pressing all modifiers fixes it.

                unstick: unstick {
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings = <&kp LSHIFT &kp RSHIFT &kp LCTRL &kp RCTRL &kp LALT &kp RALT &kp LGUI &kp RGUI>;
                };

                shifted: macro_shifted_kp {
                    #binding-cells = <1>;
                    compatible = "zmk,behavior-macro-one-param";
                    bindings =
                    <&macro_press &kp LSHFT>,
                    <&macro_param_1to1 &macro_tap &kp MACRO_PLACEHOLDER>,
                    <&macro_release &kp LSHFT>;
                };
                as: autoshift {
                    compatible = "zmk,behavior-macro-one-param";
                    #binding-cells = <1>;
                    bindings =
                    <&macro_press>,
                    <&macro_param_1to1>,
                    <&macro_param_1to2>,
                    <&as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>,
                    <&macro_pause_for_release>,
                    <&macro_release>,
                    <&macro_param_1to1>,
                    <&macro_param_1to2>,
                    <&as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>;
                };
        };

        combos {
                compatible = "zmk,combos";
                combo_esc {
                    timeout-ms = <50>;
                    key-positions = <0 1>;
                    bindings = <&kp ESC>;
                };
                combo_del {
                    timeout-ms = <50>;
                    key-positions = <8 9>;
                    bindings = <&kp DEL>;
                };
                combo_reset {
                    timeout-ms = <50>;
                    key-positions = <0 9>;
                    layers = <2>;
                    bindings = <&sys_reset>;
                };
                combo_boot {
                    timeout-ms = <50>;
                    key-positions = <5 20>;
                    layers = <2>;
                    bindings = <&bootloader>;
                };
                combo_minus {
                    key-positions = <1 2>;
                    bindings = <&as MINUS>;
                };
                combo_equals {
                    key-positions = <2 3>;
                    bindings = <&as EQUAL>;
                };
                combo_tilde {
                    key-positions = <23 24>;
                    bindings = <&kp TILDE>;
                };
                combo_under {
                    key-positions = <10 11>;
                    bindings = <&kp UNDERSCORE>;
                };
                combo_lpar {
                    key-positions = <11 12>;
                    bindings = <&kp LPAR>;
                };
                combo_rpar {
                    key-positions = <12 13>;
                    bindings = <&kp RPAR>;
                };
                combo_bslsh {
                    key-positions = <13 14>;
                    bindings = <&as BSLH>;
                };
                combo_lbkt {
                    key-positions = <21 22>;
                    bindings = <&as LBKT>;
                };
                combo_rbkt {
                    key-positions = <22 23>;
                    bindings = <&as RBKT>;
                };
                combo_grave {
                    key-positions = <3 4>;
                    bindings = <&as GRAVE>;
                };
                combo_semi {
                    key-positions = <18 19>;
                    bindings = <&as SEMICOLON>;
                };
                combo_colon {
                    key-positions = <7 8>;
                    bindings = <&as SEMICOLON>;
                };
                combo_amper {
                    key-positions = <5 6>;
                    bindings = <&kp AMPERSAND>;
                };
                combo_aster {
                    key-positions = <6 7>;
                    bindings = <&kp ASTERISK>;
                };
                combo_dollar {
                    key-positions = <15 16>;
                    bindings = <&kp DOLLAR>;
                };
                combo_percent {
                    key-positions = <16 17>;
                    bindings = <&kp PERCENT>;
                };
                combo_caret {
                    key-positions = <17 18>;
                    bindings = <&kp CARET>;
                };
                combo_bang {
                    key-positions = <25 26>;
                    bindings = <&kp EXCL>;
                };
                combo_at {
                    key-positions = <26 27>;
                    bindings = <&kp AT>;
                };
                combo_num {
                    key-positions = <27 28>;
                    bindings = <&kp HASH>;
                };
            };
        };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
            &kp Q  &kp W  &kp E  &kp R  &kp T  &kp Y   &kp U  &kp I  &kp O  &qt RIGHT_GUI  P
            &qt LEFT_GUI A    &qt LEFT_ALT S    &qt LEFT_CONTROL D    &qt LEFT_SHIFT F    &qt LC(LS(LALT)) G &qt RC(RS(RALT)) H          &qt RIGHT_SHIFT J    &qt RIGHT_CONTROL K    &qt RIGHT_ALT L   &as SINGLE_QUOTE
            &kp Z    &qt RS(RC(RA(RGUI))) X             &kp C            &kp V                 &kp B              &kp N          &kp M        &as COMMA  &as DOT    &as FSLH
            &kp ESCAPE &lt 2 TAB &lt 1 BACKSPACE   &qt RIGHT_SHIFT SPACE    &lt 2 ENTER &kp DEL 
            >;
        };

        sym_layer {
            bindings = <
 &kp LG(Q)  &kp F7 &kp F8 &kp F9 &kp F10    &trans    &kp PG_UP   &kp PG_DN  &trans    &kp LS(LG(LC(NUMBER_4))) 
 &kp LG(A)  &kp F4 &kp F5 &kp F6 &kp F11    &kp LEFT  &kp DOWN    &kp UP     &kp RIGHT &as SEMICOLON 
 &kp LG(Z)  &kp F1 &kp F2 &kp F3 &kp F12    &trans    &kp HOME    &kp END    &none     &sl 3 
            &none &kp CAPSLOCK &none &kp ESCAPE &kp DEL  &none           
            >;
        };

        // Main modifiers and arrow keys

        ext_layer {
            bindings = <
 &none    &none    &as EQUAL  &as MINUS &as GRAVE  &none     &as N7    &as N8    &as N9    &none   
 &none    &none    &kp LPAR   &kp RPAR  &as BSLH   &none     &as N4    &as N5    &as N6    &kp COLON 
 &none    &none    &as LBKT   &as RBKT  &kp TILDE  &none     &as N1    &as N2    &as N3    &kp DOT 
          &bootloader  &none &none    &kp GLOBE    &kp KP_N0 &kp DOT                
            >;
        };
    };
};
